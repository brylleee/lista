{"version":3,"sources":["App.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","name","setName","_useState3","_useState4","studentNumber","setStudentNumber","_useState5","_useState6","guild","setGuild","_useState7","_useState8","section","setSection","_useState9","_useState10","sideMenuOpen","setSideMenuOpen","lastResult","useEffect","Html5Qrcode","start","facingMode","fps","qrbox","text","result","parsed","qrcodeContent","splitted","split","parseResult","aes","decrypt","toString","match","map","v","String","fromCharCode","parseInt","join","errorMessage","console","log","catch","err","react_default","a","createElement","react_onsenui","side","width","swipeable","collapse","isOpen","onPostClose","renderToolbar","id","className","style","color","onClick","icon","align","startApp","ReactDOM","createRoot","document","getElementById","render","src_App","window","cordova","addEventListener"],"mappings":"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","file":"static/js/main.0fd47ab7.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Html5Qrcode } from \"html5-qrcode\";\n\nimport * as Ons from \"react-onsenui\";\nimport \"onsenui/css/onsenui.css\";\nimport \"onsenui/css/onsen-css-components.css\";\n\nimport aes from 'crypto-js/aes';\n\nconst spreadsheetID = \"1SI1vuW0HQUveqiKPT1Jjr_A471W02Co0OXVcp2zyeO0\";\nlet sheetName = \"\"  // SHEET NAME\nconst sheetID = 0  // SHEET ID\nconst accessToken = \"\";\n\n// Our main component\nconst App = () => {\n    // Name, guild, and section states that updates everytime QR Code is scanned\n    let [name, setName] = useState(\"\");\n    let [studentNumber, setStudentNumber] = useState(\"\");\n    let [guild, setGuild] = useState(\"\");\n    let [section, setSection] = useState(\"\");\n\n    let [sideMenuOpen, setSideMenuOpen] = useState(false);\n\n    // Separate name, guild, and section and return it as different variables\n    let parseResult = (qrcodeContent) => {\n        let splitted = qrcodeContent.split(\" [|] \");  // QR Code content example: Dela Cruz, Juan A. [|] Student No. [|] IREDOC [|] STEM1201\n        return {\n            name: splitted[0],\n            studentNumber: splitted[1],\n            guild: splitted[2],\n            section: splitted[3],\n        };\n    };\n\n    const LISTOGuilds = [ \"IREDOC\", \"SWES\", \"ETIKA\", \"NUMERIKA\", \"LETRA\" ];\n    const GILASGuilds = [ \"AWIT\", \"GALAW\", \"INSTRUMENTO\", \"LITERATURA\", \"SINING (MULTIMEDIA)\", \"SINING (VISUAL ARTS)\" ];\n\n    let sections;\n\n    let updateAttendance = async (name, section, guild) => {\n        // Name Index: Position of the Student's name in the Google Sheet\n        var nameIndex = 1;\n        const meetingDatesStartIndex = 3;\n        let nextMeetingDay;\n\n        if(LISTOGuilds.includes(guild)) {\n            sheetName = \"LISTA_SectionBased_Attendace\";\n            sections = {\n                \"ABM1101\": [4, 7],\n                \"CA1101\": [9, 22],\n                \"DA1101\": [9, 22],\n                \"HUMSS1101\": [24, 29],\n                \"TO1101\": [24, 29],\n                \"ITM1101\": [31, 54],\n                \"STEM1101\": [56, 81],\n                \"STEM1102\": [83, 92],\n                \"ABM1201\": [95, 113],\n                \"CA1201\": [115, 121],\n                \"DA1201\": [115, 121],\n                \"HUMSS1201\": [123, 134],\n                \"ITM1201\": [136, 160],\n                \"STEM1201\": [162, 178],\n                \"STEM1202\": [180, 195],\n            };\n        } else if(GILASGuilds.includes(guild)) {\n            sheetName = \"LISTA_SectionBased_GILAS_Attendance\";\n            sections = {\n                \"STEM1101\": [4, 11],\n                \"STEM1102\": [13, 41],\n                \"ABM1101\": [43, 52],\n                \"HUMSS1101\": [54, 68],\n                \"ITM1101\": [70, 83],\n                \"TO1101\": [85, 95],\n                \"CA1101\": [97, 100],\n                \"DA1101\": [102, 106],\n                \"STEM1201\": [108, 123],\n                \"STEM1202\": [125, 133],\n                \"ABM1201\": [135, 148],\n                \"HUMSS1201\": [150, 160],\n                \"TO1201\": [162, 183],\n                \"ITM1201\": [185, 194],\n                \"CA1201\": [196, 202],\n                \"DA1201\": [204, 210],\n            };\n        }\n\n        const sheetDates = await fetch(\n            `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetID}/values/${sheetName}!D2:2`,\n            {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: `Bearer ${accessToken}`,\n                },\n            }\n        );\n\n        const dates = (await sheetDates.json())[\"values\"][0];\n        const dateToday = new Date();\n\n        // Check if today is already added in the meeting dates row\n        if(dates[dates.length-1] === dateToday.toLocaleDateString('en-us',\n                                                    { month: 'short' , day: 'numeric' }).split(\" \").join(\". \")) {\n            nextMeetingDay = dates.length;\n        } else {\n            console.log(\"Cannot find Current Date in Google Sheets\\nAdding a new Column!\");\n\n            fetch(\n                `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetID}:batchUpdate`,\n                {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        //update this token with yours.\n                        Authorization: `Bearer ${accessToken}`,\n                    },\n                    body: JSON.stringify({\n                        \"requests\": [{\n                            \"updateCells\": {\n                                \"range\": {\n                                    \"sheetId\": sheetID,\n                                    \"startColumnIndex\": meetingDatesStartIndex + dates.length ,\n                                    \"endColumnIndex\": meetingDatesStartIndex + dates.length + 1,\n                                    \"endRowIndex\": 2,\n                                    \"startRowIndex\": 1\n                                },\n                                \"fields\": \"*\",\n                                \"rows\": [{\n                                    \"values\": [{\n                                        \"userEnteredValue\":{\n                                            \"stringValue\": dateToday.toLocaleDateString('en-us', { month: 'short' , day: 'numeric' }).split(\" \").join(\". \")\n                                        }\n                                    }]\n                                }]\n                            }\n                        }]\n                    }),\n                }\n            );\n\n            nextMeetingDay = dates.length + 1;\n        }\n\n        const request = await fetch(\n            `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetID}/values/${sheetName}!A${sections[section][0]}:B${sections[section][1]}`,\n            {\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: `Bearer ${accessToken}`,\n                },\n            }\n        );\n\n        const data = await request.json();\n\n        // Finding and getting the position of the Student's name\n        for (var i in data[\"values\"]) {\n            if (data[\"values\"][i][1] === name) {\n                nameIndex = parseInt(i) +  sections[section][0];\n                console.log(\"Located at Column 1, Row \" + nameIndex);\n\n                fetch(\n                    `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetID}:batchUpdate`,\n                    {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                            Authorization: `Bearer ${accessToken}`,\n                        },\n\n                        body: JSON.stringify({\n                            requests: [\n                                {\n                                    updateCells: {\n                                        rows: [\n                                            {\n                                                values: [\n                                                    {\n                                                        userEnteredValue: {\n                                                            stringValue:\n                                                                \"ATTENDED\",\n                                                        },\n                                                    },\n                                                ],\n                                            },\n                                        ],\n                                        range: {\n                                            sheetId: sheetID,\n                                            // Change Meeting Day\n                                            startColumnIndex: meetingDatesStartIndex + (nextMeetingDay - 1),\n                                            endColumnIndex: meetingDatesStartIndex + nextMeetingDay,\n                                            endRowIndex: nameIndex,\n                                            startRowIndex: nameIndex - 1,\n                                        },\n                                        fields: \"*\",\n                                    },\n                                },\n                            ],\n                        }),\n                    }\n                );\n                return;\n            }\n        }\n\n        console.log(\"Couldn't Find Name\");\n        console.log(data);\n        return data;\n    };\n\n    // Variable to compare the last result to the recent QR code\n    let lastResult = \"\";\n\n    // useEffect() means if this component is rendered (shown to the user)\n    useEffect(() => {\n        const html5QrCode = new Html5Qrcode(\"reader\"); // Use the div with id 'reader' as our QR Code Reader\n        const config = { fps: 10, qrbox: 200 }; //  QR Code Reader configurations\n\n        // Start reader using back camera\n        html5QrCode\n            .start(\n                { facingMode: \"environment\" },\n                config,\n                (text, result) => {\n                    // Parse QR Code content and update our states\n                    let parsed = parseResult(aes.decrypt(text, \"@stamaria.sti.edu.ph\").toString()  // Raw result to hex\n                                    .match(/.{1,2}/g).map(function(v) {                // Hex to string\n                                        return String.fromCharCode(parseInt(v, 16));\n                                    }).join(''))\n\n                    setName(parsed.name);\n                    setStudentNumber(parsed.studentNumber);\n                    setGuild(parsed.guild);\n                    setSection(parsed.section);\n\n                    //This conditions stops the application from updating the spreadsheet when showing the same QR code\n                    if (text !== lastResult) {\n                        lastResult = text;\n\n                        // updateAttendance(parsed.name, parsed.section, parsed.guild);\n                    }\n                },\n                (errorMessage) => {\n                    // If scan has error, this block will execute\n                    console.log(errorMessage);\n                }\n            )\n            .catch((err) => {\n                // This block will execute if the app has trouble starting the camera\n                console.log(err);\n            });\n    }, []);\n\n    let renderToolbar = () => {\n        return (\n            <Ons.Toolbar id=\"toolbar\">\n                <div className=\"left\">\n                    <div className=\"sidebyside\">\n                        <Ons.ToolbarButton style={{ color: \"white\" }} onClick={ () => setSideMenuOpen(true) }>\n                            <Ons.Icon icon=\"md-menu\"></Ons.Icon>\n                        </Ons.ToolbarButton>\n\n                        <span id=\"toolbar-title\">Lista</span>\n                    </div>\n                </div>\n            </Ons.Toolbar>\n        );\n    }\n\n    // Render all visible parts of our app, place all (HTML) contents here\n    return (\n        <Ons.Page>\n            <Ons.Splitter>\n                <Ons.SplitterSide\n                    side=\"left\"\n                    width={ \"300\" }\n                    swipeable={ true }\n                    collapse={ true }\n                    isOpen={ sideMenuOpen }\n                    onPostClose={ () => setSideMenuOpen(false) }>\n\n                    <Ons.Page> Page Left </Ons.Page>\n                </Ons.SplitterSide>\n\n                <Ons.SplitterContent>\n                    <Ons.Page\n                        renderToolbar={ renderToolbar }>\n\n                        <br /><br />\n\n                        <div id=\"reader\"></div>\n\n                        <br /><br />\n\n                        {/* Display QR Code content. This is a temporary proof of concept\n                            QR Code content should be synced to google sheets */}\n                        <div align=\"center\" id=\"student-information\">\n                            <Ons.Card>\n                                <h2 className=\"title\" align=\"center\">Student Information</h2>\n\n                                <p id=\"name\">Name: {name}</p>\n                                <p id=\"student-number\">Student number: {studentNumber}</p>\n                                <p id=\"guild\">Guild: {guild}</p>\n                                <p id=\"section\">Section: {section}</p>\n                            </Ons.Card>\n                        </div>\n                    </Ons.Page>\n                </Ons.SplitterContent>\n            </Ons.Splitter>\n        </Ons.Page>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nimport 'onsenui/css/onsenui.css';\nimport 'onsenui/css/onsen-css-components.css';\n\n// Don't make any changes here! This script just initializes our main component and starts it\n\nconst startApp = () => {\n\tconst root = ReactDOM.createRoot(document.getElementById('root'));\n\troot.render(<App />);\n};\n\n// Check if this is on Cordova Application then add an event listener for device ready first\n// Else just start the app\nif(window.cordova) {\n\tdocument.addEventListener('deviceready', startApp, false);\n} else {\n\tstartApp();\n}\n"],"sourceRoot":""}